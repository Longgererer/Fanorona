{"version":3,"sources":["components/chess/chess.scss","components/chess/chess.jsx","components/options/options.jsx","components/chessboard/chessboard.jsx","serviceWorker.js","index.js","components/chessboard/chessboard.scss","components/options/options.scss"],"names":["module","exports","Chess","printInfo","props","chess","chessInfo","passable","moveChess","usable","updateActiveChess","removable","cleanRemovableChess","mouseEnter","setState","isHover","mouseLeave","state","this","chessUrl","process","player","usableStyle","cssObj","usableActive","activeStyle","isActive","clickActive","removeStyle","className","chessBox","onClick","onMouseEnter","onMouseLeave","src","alt","isForbid","React","Component","Options","startGame","started","gameOver","nextTurn","combo","type","href","target","Chessboard","initChessInfo","whoseTurn","eatable","blackNum","whiteNum","activeChess","forbidList","usableList","judgeUsableChess","winner","console","log","alert","Object","keys","length","x","y","forEach","item","updateTurn","info","getPassablePos","move","textChess","actX","actY","differX","differY","actChess","opponent","frontX","frontY","afterX","afterY","haveFront","haveAfter","judgeChessSave","frontList","afterList","getRemovableChess","removeList","updateChessNum","isCombo","judgeCombo","handleForbid","indexOf","blankList","push","eatableList","i","k","blank","preLen","currentEatableList","judgeEatableChess","slice","len","pos","num","key","bX","bY","lastForbid","forbidChess","currentX","currentY","roundPos","currentChess","splice","direction","differ","position","borderX","borderY","posX","posY","numX","Math","abs","numY","cycleIndex","infoList","id","list","boardImg","screenBox","map","index","Boolean","window","location","hostname","match","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0a5b3941.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"chessBox\":\"src-components-chess-chess-chessBox-bed6c\",\"passable\":\"src-components-chess-chess-passable-3dd4c\",\"roll\":\"src-components-chess-chess-roll-77673\",\"usable\":\"src-components-chess-chess-usable-02c0e\",\"usableActive\":\"src-components-chess-chess-usableActive-82772\",\"clickActive\":\"src-components-chess-chess-clickActive-fe571\",\"removable\":\"src-components-chess-chess-removable-c7902\"};","import React from 'react'\r\nimport cssObj from './chess.scss'\r\n\r\nconst publicUrl = process.env.PUBLIC_URL\r\n\r\nclass Chess extends React.Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      isHover: false\r\n    }\r\n  }\r\n  printInfo = () => {\r\n    const props = this.props\r\n    const chess = props.chessInfo\r\n    if (chess.passable) props.moveChess(chess)\r\n    if (chess.usable) props.updateActiveChess(chess)\r\n    if (chess.removable) props.cleanRemovableChess(chess)\r\n  }\r\n  mouseEnter = () => {\r\n    this.setState({ isHover: true })\r\n  }\r\n  mouseLeave = () => {\r\n    this.setState({ isHover: false })\r\n  }\r\n  render () {\r\n    // 判断是黑棋还是白棋\r\n    const chess = this.props.chessInfo\r\n    const isHover = this.state.isHover\r\n    const chessUrl = process.env.PUBLIC_URL + (chess.player === 'black' ? '/black.svg' : '/white.svg')\r\n    const usableStyle = !chess.usable ? '' : isHover ? cssObj.usableActive : cssObj.usable\r\n    const activeStyle = chess.isActive ? cssObj.clickActive : ''\r\n    const removeStyle = chess.removable ? cssObj.removable : ''\r\n    return (\r\n      <div className={`${cssObj.chessBox} flex flex-1 flex-ai flex-jcc`}\r\n        onClick={this.printInfo}\r\n        onMouseEnter={this.mouseEnter}\r\n        onMouseLeave={this.mouseLeave}>\r\n        {\r\n          chess.player !== 'none' && <img className={`${usableStyle} ${activeStyle} ${removeStyle}`} src={chessUrl} alt=\"\" />\r\n        }\r\n        {\r\n          (chess.passable && this.state.isHover) && <div className={cssObj.passable}></div>\r\n        }\r\n        {\r\n          chess.isForbid && <img src={`${publicUrl}/forbid.svg`} alt=\"\" />\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Chess","import React from 'react'\r\nimport cssObj from './options.scss'\r\nimport { Button } from 'antd'\r\n\r\nclass Options extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n  }\r\n  render () {\r\n    const { startGame, started, gameOver, nextTurn, combo } = this.props\r\n    return (\r\n      <div className={cssObj.Options}>\r\n        {started && <Button type=\"danger\" onClick={() => gameOver()}>Give up</Button>}\r\n        {combo && <Button type=\"danger\" onClick={nextTurn}>Next turn</Button>}\r\n        {!started && <Button type=\"primary\" onClick={startGame}>Start!</Button>}\r\n        {started && <Button type=\"primary\" onClick={startGame}>Restart</Button>}\r\n        <Button type=\"dashed\"><a href=\"https://github.com/Longgererer/Fanorona#%E6%B8%B8%E6%88%8F%E8%A7%84%E5%88%99\" target=\"black\">Help</a></Button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Options","import React from 'react'\r\nimport cssObj from './chessboard.scss'\r\nimport Chess from '../chess/chess'\r\nimport Options from '../options/options'\r\nconst publicUrl = process.env.PUBLIC_URL\r\n\r\nclass Chessboard extends React.Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      // 棋盘棋子信息\r\n      chessInfo: [],\r\n      whoseTurn: 'white',\r\n      usableList: [],\r\n      blackNum: 0,\r\n      whiteNum: 0,\r\n      activeChess: {},\r\n      frontList: [],\r\n      afterList: [],\r\n      forbidList: [],\r\n      combo: false,\r\n      eatable: true,\r\n      started: false\r\n    }\r\n  }\r\n  updateTurn () {\r\n    // 下一回合\r\n    let { whoseTurn, chessInfo } = this.state\r\n    whoseTurn = whoseTurn === 'black' ? 'white' : 'black'\r\n    for (let y = 0;y < 5;y++) {\r\n      for (let x = 0;x < 9;x++) {\r\n        const pos = chessInfo[y][x]\r\n        pos.passable && (pos.passable = false)\r\n      }\r\n    }\r\n    this.setState({\r\n      whoseTurn,\r\n      chessInfo,\r\n      combo: false,\r\n      eatable: true,\r\n      activeChess: []\r\n    }, () => {\r\n      this.handleForbid()\r\n      this.judgeUsableChess()\r\n    })\r\n  }\r\n  startGame = () => {\r\n    // 开始游戏\r\n    this.setState({\r\n      chessInfo: this.initChessInfo(),\r\n      whoseTurn: 'white',\r\n      started: true,\r\n      combo: false,\r\n      eatable: true,\r\n      blackNum: 22,\r\n      whiteNum: 22,\r\n      activeChess: {},\r\n      forbidList: [],\r\n      usableList: []\r\n    }, () => {\r\n      this.judgeUsableChess()\r\n    })\r\n  }\r\n  gameOver = winner => {\r\n    console.log(winner)\r\n    const whoseTurn = winner ? winner : (this.state.whoseTurn === 'black' ? 'white' : 'black')\r\n    console.log(whoseTurn)\r\n    // 游戏结束\r\n    this.setState({\r\n      chessInfo: [],\r\n      blackNum: 0,\r\n      whiteNum: 0,\r\n      started: false,\r\n      activeChess: {},\r\n      eatable: true,\r\n      forbidList: [],\r\n      usableList: [],\r\n      combo: false\r\n    }, () => {\r\n      alert(`${whoseTurn} win!!!`)\r\n    })\r\n  }\r\n  nextTurn = () => {\r\n    // 下一回合\r\n    const { usableList, activeChess, chessInfo } = this.state\r\n    if (Object.keys(activeChess).length) {\r\n      const { x, y } = activeChess\r\n      chessInfo[y][x].usable = false\r\n      chessInfo[y][x].isActive = false\r\n    }\r\n    usableList.forEach(item => {\r\n      item.usable = false\r\n    })\r\n    this.setState({\r\n      combo: false,\r\n      eatable: true\r\n    })\r\n    this.updateTurn()\r\n  }\r\n  updateChessNum () {\r\n    // 更新对方棋子数，在吃掉对手棋子时更新\r\n    const state = this.state\r\n    const whoseTurn = state.whoseTurn === 'black' ? 'white' : 'black'\r\n    const chessInfo = state.chessInfo\r\n    let num = 0\r\n    for (let y = 0;y < 5;y++) {\r\n      for (let x = 0;x < 9;x++) {\r\n        if (chessInfo[y][x].player === whoseTurn) num++\r\n      }\r\n    }\r\n    if (!num) {\r\n      this.gameOver(state.whoseTurn)\r\n      return void 0\r\n    }\r\n    const key = whoseTurn === 'black' ? 'blackNum' : 'whiteNum'\r\n    this.setState({ [key]: num })\r\n  }\r\n  updateActiveChess = info => {\r\n    // 更新当前被点击的棋子\r\n    const { chessInfo, activeChess } = this.state\r\n    if (info.usable) {\r\n      if (Object.keys(activeChess).length) {\r\n        const x = activeChess.x\r\n        const y = activeChess.y\r\n        chessInfo[y][x].isActive = false\r\n      }\r\n      const x = info.x\r\n      const y = info.y\r\n      chessInfo[y][x].isActive = true\r\n      this.setState({\r\n        chessInfo,\r\n        activeChess: { x, y }\r\n      }, () => {\r\n        // 更新完点击棋子之后，需要获取该棋子可走路径\r\n        this.getPassablePos(info)\r\n      })\r\n    }\r\n  }\r\n  getPassablePos (info) {\r\n    // 获取当前点击棋子可走路径\r\n    // 获取所有空位，判断可移动棋子能否到达该空位\r\n    // 如果当前棋子的横坐标加上纵坐标为单数，则无法斜向行走\r\n    // 棋子无法在相同方向上连续走两步，无论是正向还是逆向\r\n    // 如果棋子移至当前空位不能消除棋子，或者该位置已经走过，返回\r\n    const { chessInfo, forbidList, eatable } = this.state\r\n    const blankList = []\r\n    for (let y = 0;y < 5;y++) {\r\n      for (let x = 0;x < 9;x++) {\r\n        const pos = chessInfo[y][x]\r\n        pos.player === 'none' && blankList.push(pos)\r\n      }\r\n    }\r\n    const x = info.x\r\n    const y = info.y\r\n    for (let i = 0, k = blankList.length;i < k;i++) {\r\n      const blank = blankList[i]\r\n      if (blank.isForbid) continue\r\n      const bX = blank.x\r\n      const bY = blank.y\r\n      if (forbidList.length) {\r\n        const lastForbid = forbidList[forbidList.length - 1]\r\n        if ((lastForbid.x + bX) / 2 === x && (lastForbid.y + bY) / 2 === y) continue\r\n      }\r\n      blank.passable = false // 先初始化为false\r\n      if ((x + y) % 2 === 0) {\r\n        if (bX === x + 1 || bX === x - 1) {\r\n          if (bY === y + 1 || bY === y - 1) {\r\n            const isEatable = this.moveChess(blank, false, info) || !eatable\r\n            isEatable && (blank.passable = true)\r\n          }\r\n        }\r\n      }\r\n      if (bX === x && (bY === y - 1 || bY === y + 1)) {\r\n        const isEatable = this.moveChess(blank, false, info) || !eatable\r\n        isEatable && (blank.passable = true)\r\n      }\r\n      if (bY === y && (bX === x - 1 || bX === x + 1)) {\r\n        const isEatable = this.moveChess(blank, false, info) || !eatable\r\n        isEatable && (blank.passable = true)\r\n      }\r\n    }\r\n  }\r\n  moveChess = (info, move = true, textChess) => {\r\n    // move参数表示是否移动棋子，如果为false，只检验棋子是否可以吃子，返回布尔值\r\n    // 当move为false时需要传入textChess测试棋子替代activeChess\r\n    const { chessInfo, whoseTurn, activeChess } = this.state\r\n    const { x, y } = info\r\n    const { x: actX, y: actY } = move ? activeChess : textChess\r\n    const differX = x - actX\r\n    const differY = y - actY\r\n    const actChess = chessInfo[actY][actX]\r\n    // 将玩家当前使用的棋子移动到被点击的空位\r\n    // 吃子后计算对方玩家棋子数量\r\n    // 将所有可用棋子状态重置\r\n    if (move) {\r\n      info.passable = false\r\n      info.player = whoseTurn\r\n      actChess.player = 'none'\r\n      actChess.isActive = false\r\n      for (let y = 0;y < 5;y++) {\r\n        for (let x = 0;x < 9;x++) {\r\n          const chess = chessInfo[y][x]\r\n          chess.player === whoseTurn && chess.usable && (chess.usable = false)\r\n        }\r\n      }\r\n      this.setState({ chessInfo })\r\n    }\r\n    // 检测棋子移动方向或相反方向上有无对方玩家棋子，如果有，清除对方玩家棋子\r\n    // 对手\r\n    const opponent = whoseTurn === 'black' ? 'white' : 'black'\r\n    // 前后棋子坐标\r\n    const frontX = x + differX\r\n    const frontY = y + differY\r\n    const afterX = actX - differX\r\n    const afterY = actY - differY\r\n    // 前后棋子是否存在，存在棋子时，判断棋子是否为对方棋子\r\n    let haveFront = false\r\n    let haveAfter = false\r\n    this.judgeChessSave(frontX, frontY)\r\n      && chessInfo[frontY][frontX].player === opponent\r\n      && (haveFront = true)\r\n    this.judgeChessSave(afterX, afterY)\r\n      && chessInfo[afterY][afterX].player === opponent\r\n      && (haveAfter = true)\r\n    // 如果不是真正的对棋子进行移动，只是检测是否有可吃棋子，返回\r\n    if (!move) return haveFront || haveAfter\r\n    // 获取前后对方棋子列表\r\n    let frontList = []\r\n    let afterList = []\r\n    if (haveFront) {\r\n      frontList = this.getRemovableChess(\r\n        opponent,\r\n        'front',\r\n        { x: differX, y: differY },\r\n        { x, y }\r\n      )\r\n    }\r\n    if (haveAfter) {\r\n      afterList = this.getRemovableChess(\r\n        opponent,\r\n        'after',\r\n        { x: differX, y: differY },\r\n        { x: actX, y: actY }\r\n      )\r\n    }\r\n    /**\r\n     * 如果只有一个方向有对方棋子，那么直接去掉对方棋子\r\n     * 如果两个方向都有，需要先等待玩家选择吃子方向\r\n     * 如果都没有，直接到下一回合\r\n     */\r\n    if (haveFront && haveAfter) {\r\n      const removeList = [...frontList, ...afterList]\r\n      removeList.forEach(item => {\r\n        item.removable = true\r\n      })\r\n      this.setState({\r\n        frontList,\r\n        afterList\r\n      })\r\n    } else if (!haveFront && !haveAfter) {\r\n      this.updateTurn()\r\n      return void 0\r\n    } else {\r\n      const removeList = [...frontList, ...afterList]\r\n      removeList.forEach(item => {\r\n        item.player = 'none'\r\n      })\r\n      this.updateChessNum()\r\n      // 判断移动后的棋子是否还可以继续移动吃子\r\n      const isCombo = this.judgeCombo(info, actChess)\r\n      if (isCombo) {\r\n        // 可以连击时，将该棋子置为可用\r\n        info.usable = true\r\n        this.handleForbid(actChess)\r\n      } else {\r\n        this.handleForbid(actChess)\r\n        this.updateTurn()\r\n      }\r\n    }\r\n  }\r\n  judgeCombo (chess, forbidChess) {\r\n    /**\r\n     * 判断该棋子是否可以连击\r\n     * 当棋子走完一步后触发\r\n     * 判断棋子周围是否有其他空位，不包含禁止通行的空位\r\n     * 棋子移动至空位是否可以吃子\r\n     */\r\n    const chessInfo = this.state.chessInfo\r\n    const { x: currentX, y: currentY } = chess\r\n    const roundPos = [] // 存放棋子周围8个位置的坐标\r\n    for (let y = -1;y < 2;y++) {\r\n      for (let x = -1;x < 2;x++) {\r\n        if ((currentX + currentY) % 2 === 1) {\r\n          if (y !== x) {\r\n            roundPos.push({\r\n              x: x + currentX, y: y + currentY\r\n            })\r\n          }\r\n        } else {\r\n          if (y || x) {\r\n            roundPos.push({\r\n              x: x + currentX, y: y + currentY\r\n            })\r\n          }\r\n        }\r\n      }\r\n    }\r\n    for (let i = roundPos.length - 1;i >= 0;i--) {\r\n      const { x, y } = roundPos[i]\r\n      const isSaved = this.judgeChessSave(x, y)\r\n      if (!isSaved) {\r\n        roundPos.splice(i, 1)\r\n      } else {\r\n        const afterX = forbidChess.x\r\n        const afterY = forbidChess.y\r\n        const frontX = currentX * 2 - afterX\r\n        const frontY = currentY * 2 - afterY\r\n        const currentChess = chessInfo[y][x]\r\n        // 消除非空坐标，以及同方向前后两个空坐标\r\n        if (currentChess.player !== 'none') {\r\n          roundPos.splice(i, 1)\r\n        } else if (currentChess.isForbid) {\r\n          roundPos.splice(i, 1)\r\n        } else if (x === afterX && y === afterY) {\r\n          roundPos.splice(i, 1)\r\n        } else if (x === frontX && y === frontY) {\r\n          roundPos.splice(i, 1)\r\n        }\r\n      }\r\n    }\r\n    if (!roundPos.length) return false\r\n    for (let i = 0, k = roundPos.length;i < k;i++) {\r\n      // 判断是否可吃子\r\n      const item = roundPos[i]\r\n      const blank = chessInfo[item.y][item.x]\r\n      const eatable = this.moveChess(blank, false, chess)\r\n      if (eatable) {\r\n        this.setState({\r\n          combo: true\r\n        })\r\n        return true\r\n      }\r\n    }\r\n    return false\r\n  }\r\n  handleForbid (forbidChess) {\r\n    // 处理禁止通行的坐标列表\r\n    // 如果没有传入forbidChess表示清除所有禁止棋子\r\n    const forbidList = this.state.forbidList\r\n    if (forbidChess) {\r\n      forbidChess.isForbid = true\r\n      this.setState({\r\n        forbidList: [\r\n          ...forbidList,\r\n          forbidChess\r\n        ]\r\n      })\r\n    } else {\r\n      forbidList.forEach(item => {\r\n        item.isForbid = false\r\n        item.usable = false\r\n      })\r\n      this.setState({\r\n        forbidList: []\r\n      })\r\n    }\r\n  }\r\n  getRemovableChess (opponent, direction, differ, position) {\r\n    const chessInfo = this.state.chessInfo\r\n    // 获取可移除的棋子坐标\r\n    // 判断对应方向上的对方棋子数量并返回坐标列表\r\n    let { x: differX, y: differY } = differ\r\n    if (direction !== 'front') {\r\n      differX = -differX\r\n      differY = -differY\r\n    }\r\n    const borderX = differX < 0 ? 0 : differX === 0 ? 100 : 8\r\n    const borderY = differY < 0 ? 0 : differY === 0 ? 100 : 4\r\n    let { x: posX, y: posY } = position\r\n    const numX = Math.abs(borderX - posX)\r\n    const numY = Math.abs(borderY - posY)\r\n    const cycleIndex = numX < numY ? numX : numY\r\n    const removeList = []\r\n    for (let i = 0;i < cycleIndex;i++) {\r\n      posX = posX + differX\r\n      posY = posY + differY\r\n      const chess = chessInfo[posY][posX]\r\n      if (chess.player === opponent) removeList.push(chess)\r\n      else break\r\n    }\r\n    return removeList\r\n  }\r\n  cleanRemovableChess = info => {\r\n    const { frontList, afterList } = this.state\r\n    if (frontList.indexOf(info) >= 0) {\r\n      frontList.forEach(item => {\r\n        item.player = 'none'\r\n      })\r\n      afterList.forEach(item => {\r\n        item.removable = false\r\n      })\r\n    }\r\n    if (afterList.indexOf(info) >= 0) {\r\n      afterList.forEach(item => {\r\n        item.player = 'none'\r\n      })\r\n      frontList.forEach(item => {\r\n        item.removable = false\r\n      })\r\n    }\r\n    this.updateChessNum()\r\n    this.updateTurn()\r\n  }\r\n  judgeChessSave (x, y) {\r\n    if (x >= 0 && x <= 8) {\r\n      if (y >= 0 && y <= 4) {\r\n        return true\r\n      }\r\n    }\r\n    return false\r\n  }\r\n  initChessInfo () {\r\n    const chessInfo = []\r\n    for (let y = 0;y < 5;y++) {\r\n      const infoList = []\r\n      for (let x = 0;x < 9;x++) {\r\n        // 根据坐标初始化棋子信息\r\n        const info = {\r\n          id: `${x}${y}`, // id区分唯一性\r\n          x, // 横坐标\r\n          y, // 纵坐标\r\n          player: 'white', // 棋子所属玩家\r\n          usable: false, // 棋子是否可移动\r\n          isForbid: null, // 是否禁止移动至该位置\r\n          passable: false, // 是否可以通过该位置\r\n          isActive: false, // 该棋子是否被点击\r\n          removable: false // 该棋子是否可移除(在正反方向都有可吃棋子时显示)\r\n        }\r\n        // 初始化黑白棋\r\n        if (y <= 1) {\r\n          info.player = 'black'\r\n        }\r\n        const blackPos = [0, 2, 5, 7]\r\n        if (y === 2 && blackPos.indexOf(x) !== -1) {\r\n          info.player = 'black'\r\n        }\r\n        // 中间空位\r\n        if (y === 2 && x === 4) {\r\n          info.player = 'none'\r\n        }\r\n        infoList.push(info)\r\n      }\r\n      chessInfo.push(infoList)\r\n    }\r\n    return chessInfo\r\n  }\r\n  judgeEatableChess (list, blank) {\r\n    // 找出所有可以吃子的棋子\r\n    const whoseTurn = this.state.whoseTurn\r\n    const eatableList = []\r\n    list.forEach(item => {\r\n      if (item.player === whoseTurn) {\r\n        const eatable = this.moveChess(blank, false, item)\r\n        eatable && eatableList.push(item)\r\n      }\r\n    })\r\n    return eatableList\r\n  }\r\n  judgeUsableChess = () => {\r\n    // 判断哪些棋子可用，只找出可以吃子的棋子，如果都不能吃子，就找出所有可以移动的棋子\r\n    const { whoseTurn, chessInfo } = this.state\r\n    const blankList = []\r\n    // 找出所有空着的位置\r\n    for (let y = 0;y < 5;y++) {\r\n      for (let x = 0;x < 9;x++) {\r\n        const info = chessInfo[y][x]\r\n        info.player === 'none' && blankList.push(info)\r\n      }\r\n    }\r\n    // 找出所有空位周围可移动的当前玩家的棋子，获取其坐标\r\n    let usableList = [] // 可以移动的棋子\r\n    let eatableList = [] // 可以移动并吃子的棋子\r\n    for (let i = 0, k = blankList.length;i < k;i++) {\r\n      const blank = blankList[i]\r\n      const preLen = usableList.length // push之前的长度\r\n      const x = blank.x\r\n      const y = blank.y\r\n      // 判断棋子周围的8个空位是否存在\r\n      y && usableList.push(chessInfo[y - 1][x])\r\n      x && usableList.push(chessInfo[y][x - 1])\r\n      y !== 4 && usableList.push(chessInfo[y + 1][x])\r\n      x !== 8 && usableList.push(chessInfo[y][x + 1])\r\n      if ((y + x) % 2 === 0) {\r\n        y && x && usableList.push(chessInfo[y - 1][x - 1])\r\n        y !== 4 && x !== 8 && usableList.push(chessInfo[y + 1][x + 1])\r\n        y && x !== 8 && usableList.push(chessInfo[y - 1][x + 1])\r\n        y !== 4 && x && usableList.push(chessInfo[y + 1][x - 1])\r\n      }\r\n      // 需要取出本次循环插入的可移动的棋子，与空位一起传入judgeEatableChess\r\n      // 判断该棋子是否可以吃子\r\n      const currentEatableList = this.judgeEatableChess(usableList.slice(preLen), blank)\r\n      eatableList = [...eatableList, ...currentEatableList]\r\n    }\r\n    if (eatableList.length) {\r\n      usableList = eatableList\r\n    } else {\r\n      // 如果所有棋子都不能吃子，那么旁边有空位的棋子可以随意移动\r\n      this.setState({\r\n        eatable: false\r\n      })\r\n    }\r\n    let len = usableList.length\r\n    while (len--) {\r\n      usableList[len].player === whoseTurn && (usableList[len].usable = true)\r\n    }\r\n    this.setState({ usableList })\r\n  }\r\n  render () {\r\n    const { started, chessInfo, combo } = this.state\r\n    return (\r\n      <div className=\"flex flex-ai flex-jcc flex-clo\">\r\n        <Options startGame={this.startGame} started={started} combo={combo} gameOver={this.gameOver} nextTurn={this.nextTurn}></Options>\r\n        <div className={`${cssObj.Chessboard} flex flex-ai flex-jcc`}>\r\n          <img className={cssObj.boardImg} src={`${publicUrl}/chessboard.svg`} alt=\"\" />\r\n          <div className={`${cssObj.screenBox} flex flex-clo`}>\r\n            {\r\n              chessInfo.map((list, index) => (\r\n                <div className=\"flex flex-1\" key={index}>\r\n                  {\r\n                    list.map(chess => {\r\n                      return (\r\n                        <Chess\r\n                          chessInfo={chess}\r\n                          key={chess.id}\r\n                          updateActiveChess={this.updateActiveChess}\r\n                          moveChess={this.moveChess}\r\n                          cleanRemovableChess={this.cleanRemovableChess}>\r\n                        </Chess>\r\n                      )\r\n                    })\r\n                  }\r\n                </div>\r\n              ))\r\n            }\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Chessboard","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport Chessboard from './components/chessboard/chessboard'\n\nimport * as serviceWorker from './serviceWorker'\n\nserviceWorker.unregister()\n// 模块热替换\nif (module.hot) {\n  module.hot.accept()\n}\n\nconst App = (\n  <div className=\"App noselect flex flex-ai flex-jcc flex-clo\">\n    <Chessboard></Chessboard>\n  </div>\n)\n\nReactDOM.render(\n  App,\n  document.getElementById('root')\n)\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Chessboard\":\"src-components-chessboard-chessboard-Chessboard-d1ef7\",\"boardImg\":\"src-components-chessboard-chessboard-boardImg-4595e\",\"screenBox\":\"src-components-chessboard-chessboard-screenBox-811f4\",\"chessBox\":\"src-components-chessboard-chessboard-chessBox-80a80\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Options\":\"src-components-options-options-Options-9cf4e\"};"],"sourceRoot":""}